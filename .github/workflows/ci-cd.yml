name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Run tests and linting
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: postgres
          POSTGRES_DB: backend_blockchain_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: backend_blockchain_test
        DB_USER: postgres
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret-key

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Job 2: Build and test Docker images
  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build development image
      run: |
        docker build -f Dockerfile.dev -t backend-blockchain:dev .

    - name: Build production image
      run: |
        docker build -f Dockerfile -t backend-blockchain:prod .

    - name: Test development image
      run: |
        docker run --rm backend-blockchain:dev npm run lint

    - name: Test production image health
      run: |
        # Start container in background
        docker run -d --name test-container -p 3000:3000 \
          -e NODE_ENV=production \
          -e DB_HOST=localhost \
          -e REDIS_HOST=localhost \
          -e JWT_SECRET=test-secret \
          backend-blockchain:prod
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3000/api/health/simple || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  # Job 3: Security scanning
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # # Job 4: Deploy to staging (only on develop branch)
  # deploy-staging:
  #   runs-on: ubuntu-latest
  #   needs: [test, docker-build, security]
  #   if: github.ref == 'refs/heads/develop'
    
  #   environment:
  #     name: staging
  #     url: https://staging.yourdomain.com
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: ./Dockerfile
  #       push: true
  #       tags: |
  #         ${{ secrets.DOCKER_USERNAME }}/backend-blockchain:staging-${{ github.sha }}
  #         ${{ secrets.DOCKER_USERNAME }}/backend-blockchain:staging-latest
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  #   - name: Deploy to staging
  #     run: |
  #       echo "Deploying to staging environment..."
  #       # Add your deployment commands here
  #       # Example: kubectl, docker-compose, or other deployment tools

  # # Job 5: Deploy to production (only on main branch with manual approval)
  # deploy-production:
  #   runs-on: ubuntu-latest
  #   needs: [test, docker-build, security]
  #   if: github.ref == 'refs/heads/main'
    
  #   environment:
  #     name: production
  #     url: https://yourdomain.com
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: ./Dockerfile
  #       push: true
  #       tags: |
  #         ${{ secrets.DOCKER_USERNAME }}/backend-blockchain:v${{ github.run_number }}
  #         ${{ secrets.DOCKER_USERNAME }}/backend-blockchain:latest
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  #   - name: Deploy to production
  #     run: |
  #       echo "Deploying to production environment..."
  #       # Add your production deployment commands here

  #   - name: Create GitHub release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: v${{ github.run_number }}
  #       release_name: Release v${{ github.run_number }}
  #       body: |
  #         Changes in this Release:
  #         - Automated release from GitHub Actions
  #       draft: false
  #       prerelease: false